# -*- coding: utf-8 -*-
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram import Bot, types
from ctypes import *
from config import *
import pyautogui, asyncio, logging, keyboard, win32api, win32gui, win32con, getpass, psutil, random, mss, sys, os, io, re
#################################################################################################################################
storage = MemoryStorage()
bot = Bot(token=telegram_token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s]  %(message)s', level=logging.INFO,)
#################################################################################################################################


class Is_access(BoundFilter):
	async def check(self, message: types.Message):
		if message.from_user.id in users_ids: return True
		await message.answer('<b>–î–∏ –Ω–∞—Ö—É–π —ç</b>')
		return False

class MadebyXENOBLADE(StatesGroup):
	keybind = State()
	settings = State()

def kb_menu():
	keyboard = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
	s=['üñº –ú–µ–¥–∏–∞','‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö','–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É','–ù–∞—Å—Ç—Ä–æ–π–∫–∏']
	for x in s: keyboard.insert(KeyboardButton(x))
	return keyboard

def kb_control():
	keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
	s=['üñº –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞','‚öô –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞','üö´ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö','üñº –°–∫—Ä–∏–Ω','‚ùå –ó–∞–∫—Ä—ã—Ç—å','ü™õ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤']
	for x in s: keyboard.insert(KeyboardButton(x))
	keyboard.add(KeyboardButton('üõ° –ú–µ–Ω—é'))
	return keyboard

def kb_media():
	keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
	s=['üîä','üîá','üîâ','‚è™','‚èØÔ∏è','‚è©']
	for x in s: keyboard.insert(KeyboardButton(x))
	keyboard.add(KeyboardButton('üõ° –ú–µ–Ω—é'))
	return keyboard

def kb_keybinds():
	keyboard = ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
	s=['Enter','Esc','Del','Backspace','Capslock','Space','Ctrl+Shift+Esc']
	for x in s: keyboard.insert(KeyboardButton(x))
	keyboard.add(KeyboardButton('üõ° –ú–µ–Ω—é'))
	return keyboard

def kb_settings():
	keyboard = InlineKeyboardMarkup(row_width=1, resize_keyboard=True)
	gg=re.findall(r'notice_on_startup=[\S]{0,}',open('./config.py','r').read())[0]
	if 'True' in gg: s={'–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ':'act:disable_tg'}
	else: s={'–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ':'act:enable_tg'}
	if os.path.exists(r'C:\Users\%s\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\MadebyXENOBLADE.bat'%getpass.getuser()): s['–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –∏–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞'] = 'act:del_from_auto'
	else: s['–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫'] = 'act:add_to_auto'
	for x in s: keyboard.insert(InlineKeyboardButton(x,callback_data=s[x]))
	keyboard.add(InlineKeyboardButton('üõ° –ú–µ–Ω—é',callback_data='act:close'))
	return keyboard
def kb_active_processes():
	keyboard = InlineKeyboardMarkup(row_width=1)
	s=[MadebyXENOBLADE for MadebyXENOBLADE in getWindowSizes()]
	for x in s: keyboard.insert(InlineKeyboardButton(x['text'],callback_data='act:close_proccess:%s'%x['hwnd']))
	keyboard.add(InlineKeyboardButton('üõ° –ú–µ–Ω—é',callback_data='act:close'))
	return keyboard
def kb_processes():
	keyboard = InlineKeyboardMarkup(row_width=3)
	for x in set([p.name() for p in psutil.process_iter()]): keyboard.insert(InlineKeyboardButton(x,callback_data=f'act:close_process:{x}'))
	keyboard.add(InlineKeyboardButton('üõ° –ú–µ–Ω—é',callback_data='act:close'))
	return keyboard
#################################################################################################################################
async def lock_user(): windll.LoadLibrary('user32.dll').LockWorkStation()
async def restart(): os.system('shutdown -r -t 0')
async def off(): os.system('shutdown -s -t 0')
async def screenshot():
	i='./%s.png'%random.randint(111111,9999999)
	mss.mss().shot(mon=-1, output=i)
	return i
async def up_volume(): keyboard.send('volume up')
async def mute_volume(): keyboard.send('volume mute')
async def down_volume(): keyboard.send('volume down')
async def prev_track(): keyboard.send("previous track")
async def resume_or_pause_track(): keyboard.send("play/pause media")
async def next_track(): keyboard.send("next track")
async def rewind_back_track(): keyboard.send("seekbackward")
async def rewind_forward_track(): keyboard.send("seekforward")
async def close(hwnd): 
	try:win32gui.CloseWindow(hwnd)
	except Exception as error: return {'status':False,'error_msg':error}
	return {'status':True}
def isRealWindow(hWnd):
	if not win32gui.IsWindowVisible(hWnd) or win32gui.GetParent(hWnd) != 0: return False
	if (((win32gui.GetWindowLong(hWnd, win32con.GWL_EXSTYLE) & win32con.WS_EX_TOOLWINDOW) == 0 and win32gui.GetWindow(hWnd, win32con.GW_OWNER) == 0) or ((win32gui.GetWindowLong(hWnd, win32con.GWL_EXSTYLE) & win32con.WS_EX_APPWINDOW != 0) and not win32gui.GetWindow(hWnd, win32con.GW_OWNER) == 0)):
		if win32gui.GetWindowText(hWnd): return True
	else: return False
def getWindowSizes():
	def callback(hWnd, windows):
		if not isRealWindow(hWnd): return
		windows.append({'text':win32gui.GetWindowText(hWnd),'hwnd':hWnd})
	windows = []
	win32gui.EnumWindows(callback, windows)
	return windows
async def use_keybind(keybind):
	try: keyboard.send(keybind)
	except Exception as error:	return {'status':False,'error_msg':error}
	return {'status':True}
async def add_to_startup(file_path=""):
	try:
		if file_path == "":
			file_path = os.path.abspath(__file__)
		with open(r'C:\Users\%s\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\MadebyXENOBLADE.bat'%getpass.getuser(), "w+") as bat_file:
			bat_file.write('python "%s" MadebyXENOBLADE'%file_path)
	except Exception as error: return {'status':False,'error_msg':error}
	return {'status':True}
async def del_from_startup():
	try:
		os.remove(r'C:\Users\%s\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\MadebyXENOBLADE.bat'%getpass.getuser())
	except Exception as error: return {'status':False,'error_msg':error}
	return {'status':True}
#################################################################################################################################
@dp.message_handler(CommandStart(), Is_access())
async def start(message: types.Message):
	uid=message.from_user.id
	uum=message.from_user.username
	await message.answer('<b>üõ° –ú–µ–Ω—é</b>', reply_markup=kb_menu())

@dp.message_handler(Is_access(), content_types=['text'])
async def on_text(message: types.Message):
	mt=message.text
	await message.delete()

	if mt == 'üõ° –ú–µ–Ω—é':
		await message.answer('<b>üõ° –ú–µ–Ω—é</b>', reply_markup=kb_menu())
		return
	elif mt == 'üñº –ú–µ–¥–∏–∞':
		await message.answer('<b>üñº –ú–µ–¥–∏–∞</b>', reply_markup=kb_media())
		return
	elif mt == '‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö':
		await message.answer('<b>‚öô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö</b>', reply_markup=kb_control())
		return
	elif mt == '–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É':
		await MadebyXENOBLADE.keybind.set()
		await message.answer('<b>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–≤–æ—é\n(–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–∂–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —Ç–æ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ –≤–≤–µ–¥–∏ <code>*–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π</code>, –Ω–∞–ø—Ä–∏–º–µ—Ä: Backspace*7)</b>', reply_markup=kb_keybinds())
		return
	elif mt == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
		await message.answer('<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>', reply_markup=kb_settings())
	elif mt == 'üñº –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞':
		await lock_user()
	elif mt == '‚öô –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞':
		await restart()
	elif mt == 'üö´ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö':
		await off()
	elif mt == 'üñº –°–∫—Ä–∏–Ω':
		path=await screenshot()
		await message.answer_document(open(path,'rb'))
		os.remove(path)
	elif mt == '‚ùå –ó–∞–∫—Ä—ã—Ç—å':
		await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ <code>–ø—Ä–æ—Ü–µ—Å—Å</code> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</b>', reply_markup=kb_active_processes())
	elif mt == 'ü™õ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤':
		await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ <code>–ø—Ä–æ—Ü–µ—Å—Å</code> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</b>', reply_markup=kb_processes())
	elif mt == 'üîä':
		await up_volume()
	elif mt == 'üîá':
		await mute_volume()
	elif mt == 'üîâ':
		await down_volume()
	elif mt == '‚è™':
		await prev_track()
	elif mt == '‚èØÔ∏è':
		await resume_or_pause_track()
	elif mt == '‚è©':
		await next_track()
	elif mt == '‚¨ÖÔ∏è':
		await rewind_back_track()
	elif mt == '‚û°':
		await rewind_forward_track()

@dp.callback_query_handler()
async def callback(call: types.CallbackQuery):
	cd=call.data.split(':')
	if cd[0] == 'act':
		
		if cd[1] == 'close':
			await call.message.delete()
		
		elif cd[1] == 'close_proccess':
			gg = await close(int(cd[2]))
			if gg['status']:
				await call.answer('–ó–∞–∫—Ä—ã–ª')
			else:
				await call.message.answer('<b>–ù–µ—É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: <code>%s</code></b>'%gg['error_msg'])

		elif cd[1] == 'close_process':
			try:
				for x in psutil.process_iter():
					if x.name() == cd[2]: x.kill()
				await call.answer('–ó–∞–∫—Ä—ã–ª –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã')
				await call.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ <code>–ø—Ä–æ—Ü–µ—Å—Å</code> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</b>',reply_markup=kb_processes())
			except psutil.AccessDenied: await call.message.answer('<b>–ù–µ—É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: <code>Access Denied (–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤)</code></b>')
			except Exception as error: await call.message.answer('<b>–ù–µ—É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏: <code>%s</code></b>'%error)

		elif cd[1] == 'add_to_auto':
			gg = await add_to_startup()
			if gg['status']:
				await call.answer('–î–æ–±–∞–≤–∏–ª –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫')
				await call.message.edit_text('<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>',reply_markup=kb_settings())
			else: await call.message.answer('–ù–µ—É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫: %s'%gg['error_msg'])

		elif cd[1] == 'del_from_auto':
			gg = await del_from_startup()
			if gg['status']:
				await call.answer('–£–±—Ä–∞–ª –∏–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞')
				await call.message.edit_text('<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>',reply_markup=kb_settings())
			else: await call.message.answer('–ù–µ—É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∏–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: %s'%gg['error_msg'])

		elif cd[1] == 'enable_tg':
			try:
				with open('./config.py','r') as f:
					f=f.read()
					open('./config.py','w').write(f.replace('notice_on_startup=False','notice_on_startup=True'))
				await call.answer('–í–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
				await call.message.edit_text('<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>',reply_markup=kb_settings())
			except Exception as error: await call.message.answer('–ù–µ—É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s'%error)

		elif cd[1] == 'disable_tg':
			try:
				with open('./config.py','r') as f:
					f=f.read()
					open('./config.py','w').write(f.replace('notice_on_startup=True','notice_on_startup=False'))
				await call.answer('–í—ã–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
				await call.message.edit_text('<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>',reply_markup=kb_settings())
			except Exception as error: await call.message.answer('–ù–µ—É–¥–∞–ª–æ—Å—å –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s'%error)

@dp.message_handler(state=MadebyXENOBLADE.keybind)
async def MadebyXENOBLADE_keybind(message: types.Message, state: FSMContext):
	keybind=message.text.replace(' ','+')
	
	if keybind == 'üõ°+–ú–µ–Ω—é':
	
		await state.finish()
		await message.answer('<b>üõ° –ú–µ–Ω—é</b>', reply_markup=kb_menu())
		return

	if keybind.find('*') >= 0:
		for x in range(int(keybind.split('*')[1])):
			act=await use_keybind(keybind.split('*')[0])
	else: act=await use_keybind(keybind)
	await message.delete()
	
	if act['status']:
		pass
	else:
		await message.answer('<b>–ù–µ—É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å "{}", –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏: {}</b>'.format(keybind,act['error_msg']))
#################################################################################################################################
async def on_startup(dp):
	global bot_info
	bot_info=await bot.get_me()
	async def set_default_commands(dp):
		await dp.bot.set_my_commands([types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")])
	await set_default_commands(dp)
	if len(sys.argv) >= 2:
		start_text='<b>–ü–ö –±—ã–ª –∑–∞–ø—É—â–µ–Ω</b>'
	else:
		start_text='<b>–ë–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω, –Ω–µ —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫</b>'
	for id in users_ids:
		try: await bot.send_message(id, start_text)
		except: pass
if __name__ == '__main__':
	os.system('cls')
	try: executor.start_polling(dp, on_startup=on_startup)
	except Exception as error:
		print(error)
		logging.critical('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!')